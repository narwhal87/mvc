{% extends 'base.html.twig' %}

{% block title %}Metrics{% endblock %}

{% block body %}
<div class="metrics">
    <h1>Metrics</h1>
    <div class="container">
        <div class="aside">
            {{ include('metrics/aside.html.twig') }}
        </div>
    <div class="main metrics">
        <h1 id="introduction">Introduction</h1>
        <p>My code will be analyzed (scrutinized) through the six (seven) rules for writing clean code. The rules are manifested through the six Cs as follows:</p>
        <ul>
            <li>Codestyle</li>
            Code size, SLOC and LLOC (Source Lines of code vs Logical Lines of code). Large or small methods.
            <li>Coverage</li>
            How much of a class is covered by test cases. A number of 70% and above is considered acceptable. Any number smaller than that advises the programmer to be more thorough in his or her unit testing.
            I have a code coverage of 17% which suggests that I create more tests for my controller classes which are currently left without unit testing.
            <li>(Cyclomatic) Complexity</li>
            Measures the number of treadable paths of a class (i.e. the number of control statements or if/elses). 1 - 10: Simple procedure, little risk. 11 - 20: More complex, moderate risk. 21 - 50: Complex, high risk. > 50: Untestable code, very high risk.
            <li>Cohesion</li>
            How well a class is focused on one responsibility only. A low number (0) is considered high cohesion, whilst a high number is considered low cohesion.
            <li>Coupling</li>
            Coupling is separated into afferent and efferent coupling. Afferent coupling is the number of classes depending on the actual class, and effent coupling is the number of classes the actual class depends on. High coupling values might indicate maintenance issues later on.
            <li>CRAP</li>
            "Change Risk Analyzer and Predictor (CRAP) is an estimate of the amount of work required to address crappy methods.
            The calculation is based on how complex a method is versus how many testcases cover that method. Increase the amount of testcases to decrease the crappiness."
            <li>(Code smell)</li>
            Code practices that could hint at code being hard to maintain or bugs.
        </ul>
        <h1 id="phpmetrics">PHP Metrics</h1>
        Here is an analysis of the source code of this page, and three points where improvement could be made.
        <ul>
            <li>10 violations (6 class violations and 4 package violations); 8 warnings and 2 errors (blob/god objects).</li>
            <li>Some classes have a high comment weight (above 20% which should be addressed).</li>
            <img src="/img/PhpMetrics maintainability _ complexity.png">
            <li>Some classes (red circles) have a high cyclomatic complexity and might be hard to maintain.</li>
            <li>Generally, the class JSONController is highly efferent and could be scrutinized to find improvements in the code. JSONController also lacks cohesion, with a LCOM value of 10 and high volume.</li>
            <li>However, most of the code is within top-rated limits and there is no immediate call for code refactoring. The violations should be dealt with with the aim of making it zero.</li>
        </ul>
        <h3>Summary</h3>
        <p>It is evident that JSONController needs some address, however it is not without reason that this class lacks cohesion as it is supposed to integrate many different API calls from different types of classes. Such a controller class also needs a lot of routes, and to break the controller class into two changes nothing.</p>
        <p>The main issue will still be to see if the JSONController can be trimmed somewhat. I will also see if I can fix the violations and get rid of unnecessary non-LLOC.</p>
        <h1 id="scrutinizer">Scrutinizer</h1>
        <a href="https://scrutinizer-ci.com/g/narwhal87/mvc/?branch=main"><img src="https://scrutinizer-ci.com/g/narwhal87/mvc/badges/quality-score.png?b=main"></a>
        <a href="https://scrutinizer-ci.com/g/narwhal87/mvc/?branch=main"><img src="https://scrutinizer-ci.com/g/narwhal87/mvc/badges/coverage.png?b=main"></a>
        <a href="https://scrutinizer-ci.com/g/narwhal87/mvc/?branch=main"><img src="https://scrutinizer-ci.com/g/narwhal87/mvc/badges/build.png?b=main"></a>
        <a href="https://scrutinizer-ci.com/g/narwhal87/mvc/?branch=main"><img src="https://scrutinizer-ci.com/g/narwhal87/mvc/badges/code-intelligence.svg?b=main"></a>
        <p>Scrutinizer suggests that the code coverage is low, and the reason for this is as aforementioned because of untested controller classes.</p>
        <img src="/img/code_coverage.png">
        <p>21 issues (10 major).</p>
        <p>No Cyclomatic Complexity above 20 and no size alarmingly larger than around 200 SLOC.</p>
        <p>All classes A rated.</p>
        <h3>Summary</h3>
        <p>Code coverage for controller classes is low, and there are some issues.</p>
        <h1 id="improvements">Improvements</h1>
        <ol>
            <li>Decrease the number of issues mentioned in Scrutinizer.</li>
            <li>Increase code coverage by implementing test cases for some controller classes. The aim is 70% code coverage overall.</li>
            <li>Remove unneccesary comments.</li>
            <li>Trim JSONController if possible to decrease cyclomatic complexity and low cohesion.</li>
        </ol>
        <h1 id="discussion">Discussion</h1>
</div>
{% endblock %}

{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <h1>Report</h1>
    <div class="container">
        <div class="aside">
            <ul>
                <li><a href="#kmom01">KMOM01</a></li>
                <li><a href="#kmom02">KMOM02</a></li>
                <li><a href="#kmom03">KMOM03</a></li>
                <li><a href="#kmom04">KMOM04</a></li>
                <li><a href="#kmom05">KMOM05</a></li>
                <li><a href="#kmom06">KMOM06</a></li>
                <li><a href="#kmom10">KMOM010</a></li>
            </ul>
        </div>
        <div class="main">
            <h2 id="kmom01">KMOM01</h2>
            <h3>Berätta kort om dina förkunskaper och tidigare erfarenheter kring objektorientering.</h4>
            <p>Jag har gått både databaskursen och pythonkursen med fokus på objektorienterad programmering, och jag har tidigare jobbat med objekt i C++ och Java. Jag gillar att arbeta med objekt, och  tycker att det är ett enkelt sätt föreställa sig hur saker förhåller sig till varandra. Framförallt tycker jag det blir enklare att skapa språköverskridande ramverk som ska tala med varandra, som i t ex fallet med symfony och basklasserna för Response.</p>
            <h3>Berätta kort om PHPs modell för klasser och objekt. Vilka är de grunder man behöver veta/förstå för att kunna komma igång och skapa sina första klasser?</h4>
            <p>Ja, jag vet inte riktigt. Det är väl ungefär som i Python där ett objekt har attribut och metoder (som kallas något annat i PHP, tror jag). Attributen och metoderna kan vara publika, privata eller protected. Objektorienteringen handlar framförallt om inkapsling av data. Sen var det någonting om Namespaces som man kunde definiera i PHP. Jag hängde inte helt med på detaljerna, men tänker att det nog kommer att släppa när vi fördjupar oss i det. </p>
            <h3>Reflektera kort över den kodbas, koden, strukturen som användes till uppgiften me/report, hur uppfattar du den?</h4>
            <p>Det var lite krångligt att förstå instruktionen om var allt skulle installeras, men efter det var det rätt så straightforward. Jag tycker det är en tydlig överblick där man använder controllers i src-mappen, twig-templatefiler i templates-mappen samt assets eller public för stylesheets, css, js och statiska resurser. Jag gillar att man fick sitta med Markdown lite grann och rulla twig. Det hela fungerade riktigt smidigt, och låter en, kan jag tycka, fokusera på utseendet på ett helt annat sätt.</p>
            <h3>Med tanke på artikeln “PHP The Right Way”, vilka delar in den finner du extra intressanta och värdefulla? Är det några särskilda områden som du känner att du vill veta mer om? Lyft fram några delar av artikeln som du känner mer värdefulla.</h4>
            <p>Jag har inte mer än skummat igenom artikeln. Men jag skulle vilja fördjupa mig i templating, databaser och allmän programmeringspraxis. Även att dokumentera koden vill jag bli bättre på, då jag ser framför mig ett behov av att arbeta i stora team och ha möjligheten att släppa in människor snabbt i projekt eller arbeta opensource.</p>
            <h3>Vilken är din TIL för detta kmom?</h4>
            <p>MD och Twig var en blast från designkursen. Jag har inte gjort hela den så det var rent allmänt hur man arbetar med twig och MD som jag behövde fräscha upp. Roligt också att arbeta från scratch med att förväntas installera ett ramverk på rätt sätt på rätt ställe och ta allt därifrån. Man blir mer independent. Bra tanke med uppgiften!</p>
            <h2 id="kmom02">KMOM02</h2>
            <h3>Förklara kort de objektorienterade konstruktionerna arv, komposition, interface och trait och hur de används i PHP.</h3>
            <p>När en klass ärver från en annan basklass som erhåller den basklassens attribut och metoder. Konstruktorn för basklassen nås med parent::__construct(), där scope-resolution-operatorn :: ger tillgång till basklassens konstruktor. Den kan dock överlagras med klassens egen konstruktor. Arv sker när klasser har en "is-a"-relation.</p>
            <p>Komposition handlar om att en klass består av objekt från en annan klass, dvs klasserna har en "has-a"-relation. Klassen som består av andra klassobjekt kan inte existera utan dessa klassobjekt.</p>
            <p>Interface och trait hann jag inte läsa på om, men jag tolkade det inte heller som obligatoriskt.</p>
            <h3>Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden och dina klasser?</h3>
            <p>Efter att ha byggt applikationen Pig så kändes det ganska straightforward. Jag skapade en klass Card som har alla färger och valörer publikt i varsin lista, samt ett kort som består av en valör och en färg. Jag lät även kortets färg och valör vara varsitt attribut i Card-objektet, utifall att det skulle komma att behövas enkel tillgång till det senare.</p>
            <p>Deck och Hand ärver från Card och Deck består av 52 (55) olika Card-objekt som hålls i en lista. Hand ärver från Deck tills vidare för att kunna ha tillgång till den aktuella kortleken enklare, men det är enkelt att ta bort då dess konstruktor är överlagrad.</p>
            <p>Hade problem med API-delen och att dra olika antal kort. Försökt i två veckor att få till det men har inte lyckats riktigt och har inte tid att sitta fast mer, så jag gjorde ett fulhack med en route med annat namn som får hantera en POST från ett formulär på landningssidan för API, sedan görs en redirect till en route med /:num där variabeln num skickas med till path() som parameter. Tycker inte det lirade med vad jag tror man vill att vi ska göra, så jag tar gärna emot tips från rättare.</p>
            <h3>Vilka är dina reflektioner så här långt med att jobb i Symfony med applikationskod enligt MVC?</h3>
            <p>Jag tycker det finns en tydlig struktur, och ramverket är tacksamt att arbeta med. Lite irriterande att behöva starta om webservern mellan varje ändring av routes i alla controllers. Namespaces var också lurigt att få till i början, men verkar rulla nu. Lite oklart hur bilderna hanteras, då det finns både bilder i public/img samt i assets. Jag kan tycka att ett sätt hade räckt att göra saker på.</p>
            <h3>Vilken är din TIL för detta kmom?</h3>
            <p>Starta om webservern efter varje ändring i en Controller. Det är inte namespace det är fel på.</p>
            <p>Tagga inte varje commit. Pusha inte varje commit. Skriv korta commit-meddelanden i imperativ.</p>
            <h2 id="kmom03">KMOM03</h2>
            <h3>Berätta hur det kändes att modellera ett kortspel med flödesdiagram och psuedokod. Var det något som du tror stödjer dig i din problemlösning och tankearbete för att strukturera koden kring en applikation?</h3>
            <p>Jag gillar att skriva pseudokod. Jag brukar göra det när jag åker tåg och försöker lösa mina problem. Det är ett bra tillfälle att hitta nya perspektiv för att lösa problem. Flödesschemat tyckte jag stöttade mig väldigt bra i hur jag ville göra saker i vilken ordning. Jag ska definitivt försöka utnyttja det mer ordentligt framöver.</p>
            <h3>Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden, dina klasser och applikationen som helhet?</h3>
            <p>Jag försökte att börja uppifrån och ner och få till logiken med att dra kort och presentera summor. Sen byggde jag bara på logiken därifrån direkt i controllern. Målet var att börja så och sen om jag har tid strukturera om koden så att jag använde ett Game-objekt istället. Nu hann jag inte det så det får bli till nästa kursmoment. jag använde mig av ganska mycket session-variabler för att skriva till och från. Det jag måste fixa till är att lösa exceptions och felmeddelanden, samt lite CSS för det blev inte helt snyggt nu. Sen omstruktureringen då.</p>
            <h3>Vilken är din känsla för att koda i ett ramverk som Symfony, så här långt in i kursen?</h3>
            <p>Nu tycker jag det går ganska bra. Det är roligt och blir snyggt. Fick problem med mina vendor names och lintern vill inte riktigt göra som jag vill i scriptet i composer.json men annars tycker jag det är enkelt att hitta och flödet är väldigt tydligt. Speciellt gillar jag när vi tar ram ramverksobjekt och arbetar mot dem. Mer sånt!</p>
            <h3>Vilken är din TIL för detta kmom?</h3>
            <p>Börja med flödesschema och pseudokod även i fortsättningen och ha som dokumentation. Thin, Fat and Stupid var ett bra sätt att komma ihåg controllers, models och views på.</p>
            <h2 id="kmom04">KMOM04</h2>
            <h3>Berätta hur du upplevde att skriva kod som testar annan kod med PHPUnit och hur du upplever phpunit rent allmänt.</h3>
            <p>Jag tycker PHPUnit är ett robust system. Har använt det tidigare till att skriva mindre tester och jag tycker det är enkelt att skriva tester i. Framförallt hela maskineriet med mocking är smart.</p>
<h3>Hur väl lyckades du med kodtäckningen av din kod, lyckades du nå mer än 90% kodtäckning?</h3>
<p>Jag verkade lyckas med sup 90% på alla klasser i slutet. Det var lite trixande med att komma in i snåriga if-satser och edge cases som vad händer om man får ett ess och en summa mer än 21? Har inte riktigt hittat dit ännu, men läste idag i dokumentationen om att det går att göra med t ex mocking och test doubles.</p>

<h3>Upplever du din egen kod som “testbar kod” eller finns det delar i koden som är mer eller mindre testbar och finns det saker som kan göras för att förbättra kodens testbarhet?</h3>
<p>Jag skrev om controllerklasserna så att logiken hamnade i en egen klass, och efter det så gick det bra att skriva testbar kod. Som sagt ovan så vill jag lära mig mer om hur jag kommer åt olika corner cases. Jag är inte riktigt där ännu, men det känns som att det borde gå genom att tvinga fram ett särskilt return value för olika metoder i koden.</p>
<h3>Valde du att skriva om delar av din kod för att förbättra den eller göra den mer testbar, om så berätta lite hur du tänkte.</h3>
<p>Ja, det hände åtskilliga gånger att jag fick ta bort kod som inte användes eller var relevant. I Hand-klassen fick jag till och med göra om hela konstruktorn då jag hade ett arv där som jag missat att ta hänsyn till. Annars så gjorde jag en refactoring av spellogiken till en egen Game-klass. Den bröt jag sedan ned i mindre delar enligt principen DRY.</p>
<h3>Fundera över om du anser att testbar kod är något som kan identifiera “snygg och ren kod”.</h3>
<p>Jag förstår inte frågan riktigt. Jag tror att testbar kod kan i ett senare skede generera snygg och ren kod, och tvingar oss att skriva på ett sätt som är mer lättöverskådligt i slutändan. Den hjälper oss att hitta svagheter i koden, om vi vill. Men den kan också låta oss vara lata med en redan lång och krånglig kod genom att låta oss verifiera att den fungerar som den ska, och inte behöver ägnas mer möda än nödvändigt om den gör det den ska. Don't fix what doesn't need fixing.</p>
<h3>Vilken är din TIL för detta kmom?</h3>
<p>Att linters mest är bråkiga, och att det är bra att kunna välja nivå på återkopplingen från linters. Composer är ett grymt verktyg, och även PHPUnit. Man blir triggad att skriva tester för att PHPUnit är så robust och bra.</p>
            <h2 id="kmom05">KMOM05</h2>
            <h3>Gick det bra att jobba igenom övningen med Symfony och Doctrine. Något särskilt du tänkte/reagerade på under övningen?</h3>
            <p>Det gick förvånansvärt enkelt att förstå hur allt hänger ihop med repository, manager osv. Det är förstås väldigt översiktligt, men det är kanske också syftet med ramverk att man ska slippa ge sig in i detaljerna alltför mycket. Väldigt skönt att kunna koppla upp sig mot en databas och kunna göra CRUD.</p>
            <h3>Berätta om din applikation och hur du tänkte när du byggde upp den. Tänkte du något speciellt på användargränssnittet?</h3>
            <p>Jag ville ha en vy över hela bibliotekets böcker, som en slags inventarielista. Därifrån ska man kunna nå i stort sett resten av alla routes, dvs man ska kunna välja att se detaljer, uppdatera eller ta bort en bok. Jag har en aside med länkar som jag lagt till i varje vy, så att den hela tiden är synlig. På så vis är det inget man som användare inte kan nå via länkar. Jag använde webb-urler för att enkelt kunna få till snygga bilder.</p>
            <h3>Gick det bra att jobba med ORM i CRUD eller vad anser du om det, jämför gärna med andra sätt att jobba med databaser?</h3>
            <p>Ja, det var också väldigt enkelt även om jag önskat att man slapp jobba i sqlite. Jag hade gärna blivit tvingad till att använda MariaDB och istället haft SQLite som ett "snabbspår", nu kändes det omvänt som att vi gör SQLite och så kan man om man vill göra något extra använda t ex MariaDB. Eftersom vi precis gjort en kurs med det kändes det annars vettigt att göra just så. Kanske nästa år... Annars tycker jag ORM var väldigt enkelt och lätt att extrapolera kring hur man ska tänka för att få ut det man behöver. Och man kan ju alltid skicka med riktig SQL, förstås.</p>
            <h3>Vad är din uppfattning om ORM så här långt och relatera gärna till andra sätt att jobba med applikationskod mot databaser?</h3>
            <p>Jag tror jag svarat på det ovan. Det är lättarbetat och enkelt att lista ut hur man ska göra nya saker.</p>
            <h3>Vilken är din TIL för detta kmom?</h3>
            <p>Jag lärde mig äntligen hur man kan skicka med variabeldata inuti twig-kod. Nu blev det mycket snyggare länkar och framförallt mycket snyggare lösningar för att skicka data mellan routes i controllern.</p>
            <h2 id="kmom06">KMOM06</h2>
            <p>Lorem ipsum</p>
            <p>Lorem ipsum</p>
            <p>Lorem ipsum</p>
            <p>Lorem ipsum</p>
            <p>Lorem ipsum</p>
            <p>Lorem ipsum</p>
            <h2 id="kmom10">KMOM10</h2>
            <p>Lorem ipsum</p>
            <p>Lorem ipsum</p>
            <p>Lorem ipsum</p>
            <p>Lorem ipsum</p>
            <p>Lorem ipsum</p>
            <p>Lorem ipsum</p>
        </div>
      </div>
{% endblock %}

{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <h1>Report</h1>
    <div class="container">
        <div class="aside">
            <ul>
                <li><a href="#kmom01">KMOM01</a></li>
                <li><a href="#kmom02">KMOM02</a></li>
                <li><a href="#kmom03">KMOM03</a></li>
                <li><a href="#kmom04">KMOM04</a></li>
                <li><a href="#kmom05">KMOM05</a></li>
                <li><a href="#kmom06">KMOM06</a></li>
                <li><a href="#kmom10">KMOM010</a></li>
            </ul>
        </div>
        <div class="main">
            <h2 id="kmom01">KMOM01</h2>
            <h3>Berätta kort om dina förkunskaper och tidigare erfarenheter kring objektorientering.</h4>
            <p>Jag har gått både databaskursen och pythonkursen med fokus på objektorienterad programmering, och jag har tidigare jobbat med objekt i C++ och Java. Jag gillar att arbeta med objekt, och  tycker att det är ett enkelt sätt föreställa sig hur saker förhåller sig till varandra. Framförallt tycker jag det blir enklare att skapa språköverskridande ramverk som ska tala med varandra, som i t ex fallet med symfony och basklasserna för Response.</p>
            <h3>Berätta kort om PHPs modell för klasser och objekt. Vilka är de grunder man behöver veta/förstå för att kunna komma igång och skapa sina första klasser?</h4>
            <p>Ja, jag vet inte riktigt. Det är väl ungefär som i Python där ett objekt har attribut och metoder (som kallas något annat i PHP, tror jag). Attributen och metoderna kan vara publika, privata eller protected. Objektorienteringen handlar framförallt om inkapsling av data. Sen var det någonting om Namespaces som man kunde definiera i PHP. Jag hängde inte helt med på detaljerna, men tänker att det nog kommer att släppa när vi fördjupar oss i det. </p>
            <h3>Reflektera kort över den kodbas, koden, strukturen som användes till uppgiften me/report, hur uppfattar du den?</h4>
            <p>Det var lite krångligt att förstå instruktionen om var allt skulle installeras, men efter det var det rätt så straightforward. Jag tycker det är en tydlig överblick där man använder controllers i src-mappen, twig-templatefiler i templates-mappen samt assets eller public för stylesheets, css, js och statiska resurser. Jag gillar att man fick sitta med Markdown lite grann och rulla twig. Det hela fungerade riktigt smidigt, och låter en, kan jag tycka, fokusera på utseendet på ett helt annat sätt.</p>
            <h3>Med tanke på artikeln “PHP The Right Way”, vilka delar in den finner du extra intressanta och värdefulla? Är det några särskilda områden som du känner att du vill veta mer om? Lyft fram några delar av artikeln som du känner mer värdefulla.</h4>
            <p>Jag har inte mer än skummat igenom artikeln. Men jag skulle vilja fördjupa mig i templating, databaser och allmän programmeringspraxis. Även att dokumentera koden vill jag bli bättre på, då jag ser framför mig ett behov av att arbeta i stora team och ha möjligheten att släppa in människor snabbt i projekt eller arbeta opensource.</p>
            <h3>Vilken är din TIL för detta kmom?</h4>
            <p>MD och Twig var en blast från designkursen. Jag har inte gjort hela den så det var rent allmänt hur man arbetar med twig och MD som jag behövde fräscha upp. Roligt också att arbeta från scratch med att förväntas installera ett ramverk på rätt sätt på rätt ställe och ta allt därifrån. Man blir mer independent. Bra tanke med uppgiften!</p>
            <h2 id="kmom02">KMOM02</h2>
            <h3>Förklara kort de objektorienterade konstruktionerna arv, komposition, interface och trait och hur de används i PHP.</h3>
            <p>När en klass ärver från en annan basklass som erhåller den basklassens attribut och metoder. Konstruktorn för basklassen nås med parent::__construct(), där scope-resolution-operatorn :: ger tillgång till basklassens konstruktor. Den kan dock överlagras med klassens egen konstruktor. Arv sker när klasser har en "is-a"-relation.</p>
            <p>Komposition handlar om att en klass består av objekt från en annan klass, dvs klasserna har en "has-a"-relation. Klassen som består av andra klassobjekt kan inte existera utan dessa klassobjekt.</p>
            <p>Interface och trait hann jag inte läsa på om, men jag tolkade det inte heller som obligatoriskt.</p>
            <h3>Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden och dina klasser?</h3>
            <p>Efter att ha byggt applikationen Pig så kändes det ganska straightforward. Jag skapade en klass Card som har alla färger och valörer publikt i varsin lista, samt ett kort som består av en valör och en färg. Jag lät även kortets färg och valör vara varsitt attribut i Card-objektet, utifall att det skulle komma att behövas enkel tillgång till det senare.</p>
            <p>Deck och Hand ärver från Card och Deck består av 52 (55) olika Card-objekt som hålls i en lista. Hand ärver från Deck tills vidare för att kunna ha tillgång till den aktuella kortleken enklare, men det är enkelt att ta bort då dess konstruktor är överlagrad.</p>
            <p>Hade problem med API-delen och att dra olika antal kort. Försökt i två veckor att få till det men har inte lyckats riktigt och har inte tid att sitta fast mer, så jag gjorde ett fulhack med en route med annat namn som får hantera en POST från ett formulär på landningssidan för API, sedan görs en redirect till en route med /:num där variabeln num skickas med till path() som parameter. Tycker inte det lirade med vad jag tror man vill att vi ska göra, så jag tar gärna emot tips från rättare.</p>
            <h3>Vilka är dina reflektioner så här långt med att jobb i Symfony med applikationskod enligt MVC?</h3>
            <p>Jag tycker det finns en tydlig struktur, och ramverket är tacksamt att arbeta med. Lite irriterande att behöva starta om webservern mellan varje ändring av routes i alla controllers. Namespaces var också lurigt att få till i början, men verkar rulla nu. Lite oklart hur bilderna hanteras, då det finns både bilder i public/img samt i assets. Jag kan tycka att ett sätt hade räckt att göra saker på.</p>
            <h3>Vilken är din TIL för detta kmom?</h3>
            <p>Starta om webservern efter varje ändring i en Controller. Det är inte namespace det är fel på.</p>
            <p>Tagga inte varje commit. Pusha inte varje commit. Skriv korta commit-meddelanden i imperativ.</p>
            <h2 id="kmom03">KMOM03</h2>
            <h3>Berätta hur det kändes att modellera ett kortspel med flödesdiagram och psuedokod. Var det något som du tror stödjer dig i din problemlösning och tankearbete för att strukturera koden kring en applikation?</h3>
            <p>Jag gillar att skriva pseudokod. Jag brukar göra det när jag åker tåg och försöker lösa mina problem. Det är ett bra tillfälle att hitta nya perspektiv för att lösa problem. Flödesschemat tyckte jag stöttade mig väldigt bra i hur jag ville göra saker i vilken ordning. Jag ska definitivt försöka utnyttja det mer ordentligt framöver.</p>
            <h3>Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden, dina klasser och applikationen som helhet?</h3>
            <p>Jag försökte att börja uppifrån och ner och få till logiken med att dra kort och presentera summor. Sen byggde jag bara på logiken därifrån direkt i controllern. Målet var att börja så och sen om jag har tid strukturera om koden så att jag använde ett Game-objekt istället. Nu hann jag inte det så det får bli till nästa kursmoment. jag använde mig av ganska mycket session-variabler för att skriva till och från. Det jag måste fixa till är att lösa exceptions och felmeddelanden, samt lite CSS för det blev inte helt snyggt nu. Sen omstruktureringen då.</p>
            <h3>Vilken är din känsla för att koda i ett ramverk som Symfony, så här långt in i kursen?</h3>
            <p>Nu tycker jag det går ganska bra. Det är roligt och blir snyggt. Fick problem med mina vendor names och lintern vill inte riktigt göra som jag vill i scriptet i composer.json men annars tycker jag det är enkelt att hitta och flödet är väldigt tydligt. Speciellt gillar jag när vi tar ram ramverksobjekt och arbetar mot dem. Mer sånt!</p>
            <h3>Vilken är din TIL för detta kmom?</h3>
            <p>Börja med flödesschema och pseudokod även i fortsättningen och ha som dokumentation. Thin, Fat and Stupid var ett bra sätt att komma ihåg controllers, models och views på.</p>
            <h2 id="kmom04">KMOM04</h2>
            <p>Lorem ipsum</p>
            <p>Lorem ipsum</p>
            <p>Lorem ipsum</p>
            <p>Lorem ipsum</p>
            <p>Lorem ipsum</p>
            <p>Lorem ipsum</p>
            <h2 id="kmom05">KMOM05</h2>
            <p>Lorem ipsum</p>
            <p>Lorem ipsum</p>
            <p>Lorem ipsum</p>
            <p>Lorem ipsum</p>
            <p>Lorem ipsum</p>
            <p>Lorem ipsum</p>
            <h2 id="kmom06">KMOM06</h2>
            <p>Lorem ipsum</p>
            <p>Lorem ipsum</p>
            <p>Lorem ipsum</p>
            <p>Lorem ipsum</p>
            <p>Lorem ipsum</p>
            <p>Lorem ipsum</p>
            <h2 id="kmom10">KMOM10</h2>
            <p>Lorem ipsum</p>
            <p>Lorem ipsum</p>
            <p>Lorem ipsum</p>
            <p>Lorem ipsum</p>
            <p>Lorem ipsum</p>
            <p>Lorem ipsum</p>
        </div>
      </div>
{% endblock %}
